<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Nevermoi</title>
 <link href="http://nevermoi.com/atom.xml" rel="self"/>
 <link href="http://nevermoi.com/"/>
 <updated>2016-10-11T15:20:22+08:00</updated>
 <id>http://nevermoi.com</id>
 <author>
   <name>shuson</name>
   <email>wlgq@hotmail.com</email>
 </author>

 
 <entry>
   <title>Read TCP segment by example</title>
   <link href="http://nevermoi.com/2016/08/16/read-tcp-segment.html"/>
   <updated>2016-08-16T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/08/16/read-tcp-segment</id>
   <content type="html">&lt;h1 id=&quot;what-is-a-tcp-segment&quot;&gt;What is a TCP segment?&lt;/h1&gt;

&lt;p&gt;TCP is a transport layer protocol used by applications that require guaranteed delivery. And the byte stream is transfered in segment illustrated below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0                   1                   2                   3   
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |           |U|A|P|R|S|F|                               |
   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
   |       |           |G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explain-the-segment-by-tcpdump&quot;&gt;Explain the segment by tcpdump&lt;/h2&gt;
&lt;p&gt;Let’s say, we have a client-server connection example, which are about to playing “echo” game.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client starts a connection to server, tcpdump will capture following segments as 3 time shake-hand:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// seg 1
13:27:45.927137 IP (tos 0x0, ttl  64, id 304, offset 0, flags [DF], proto: TCP (6), length: 60) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: S, cksum 0x5f32 (correct), 2584692379:2584692379(0) win 32792 &amp;lt;mss 16396,sackOK,timestamp 10962859 0,nop,wscale 6&amp;gt;

//seg 2
13:27:45.927254 IP (tos 0x0, ttl  64, id 0, offset 0, flags [DF], proto: TCP (6), length: 60) 127.0.0.1.6888 &amp;gt; 127.0.0.1.60534: S, cksum 0x3648 (correct), 2589673026:2589673026(0) ack 2584692380 win 32768 &amp;lt;mss 16396,sackOK,timestamp 10962860 10962859,nop,wscale 6&amp;gt;

//seg 3
13:27:45.927265 IP (tos 0x0, ttl  64, id 305, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: ., cksum 0x1d6a (correct), 2584692380:2584692380(0) ack 2589673027 win 513 &amp;lt;nop,nop,timestamp 10962860 10962860&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blabla:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. tos: [Type of Service](https://en.wikipedia.org/wiki/Type_of_service)
2. TTL(time - to - live): means maxium number of routers passed through, whenever this segment passes through a router, TTL minus 1.
3. id: IP packet indentification, for the use of grouping data
4. offset: grouping data
5. flags: DF means no grouping, MF means multiple grouping
6. proto: protocol in use
7. 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: source IP address to destination
8. S: means new connection established, the SYN flag becomes &quot;1&quot; and ISN(Initial Sequence Number) is created for both client as &quot;2584692379&quot;, for server side the ISN is &quot;2589673026&quot; when server responds
9. chksum: for checking 
10. win: TCP window for the control of congestion. Tell the other side how many data the sender can recieve.
11: ack: tell the other side, the data is recieved.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Client sends “a” to server side, tcpdump will capture the following segments:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// seg 1
13:27:48.248592 IP (tos 0x0, ttl  64, id 306, offset 0, flags [DF], proto: TCP (6), length: 54) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: P, cksum 0xfe2a (incorrect (-&amp;gt; 0xb344), 2584692380:2584692382(2) ack 2589673027 win 513 &amp;lt;nop,nop,timestamp 10965181 10962860&amp;gt;

// seg 2
13:27:48.248739 IP (tos 0x0, ttl  64, id 495, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.6888 &amp;gt; 127.0.0.1.60534: ., cksum 0x0b47 (correct), 2589673027:2589673027(0) ack 2584692382 win 512 &amp;lt;nop,nop,timestamp 10965181 10965181&amp;gt;

// seg 3
13:27:48.249061 IP (tos 0x0, ttl  64, id 496, offset 0, flags [DF], proto: TCP (6), length: 54) 127.0.0.1.6888 &amp;gt; 127.0.0.1.60534: P, cksum 0xfe2a (incorrect (-&amp;gt; 0xaa32), 2589673027:2589673029(2) ack 2584692382 win 512 &amp;lt;nop,nop,timestamp 10965181 10965181&amp;gt;

// seg 4
13:27:48.249085 IP (tos 0x0, ttl  64, id 307, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: ., cksum 0x0b43 (correct), 2584692382:2584692382(0) ack 2589673029 win 513 &amp;lt;nop,nop,timestamp 10965182 10965181&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blabla:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. seg 1, P means PUSH, &quot;a\n&quot; is 2 bits, so the length is 54. If no data transfered, length should be 52
2. seg 2, it means server ACK the data sending from client.
3. seg 3, server responds with &quot;a\n&quot;
4. seg 4, client ACK the data sending from server
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Client closes connection to server side, tcpdump will capture the following segments:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// seg 1
13:38:10.081895 IP (tos 0x0, ttl  64, id 310, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: F, cksum 0x897d (correct), 2584692386:2584692386(0) ack 2589673033 win 513 &amp;lt;nop,nop,timestamp 11586913 10966477&amp;gt;

// seg 2
13:38:10.081987 IP (tos 0x0, ttl  64, id 498, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.6888 &amp;gt; 127.0.0.1.60534: F, cksum 0x11e0 (correct), 2589673033:2589673033(0) ack 2584692387 win 512 &amp;lt;nop,nop,timestamp 11586913 11586913&amp;gt;

// seg 3
13:38:10.081993 IP (tos 0x0, ttl  64, id 311, offset 0, flags [DF], proto: TCP (6), length: 52) 127.0.0.1.60534 &amp;gt; 127.0.0.1.6888: ., cksum 0x11df (correct), 2584692387:2584692387(0) ack 2589673034 win 513 &amp;lt;nop,nop,timestamp 11586913 11586913&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blabla:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. seg 1, F means Fin, close request
2. seg 2, server responds F to close connection
3. seg 3, client side confirms the close request.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//EOB&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding the Event Model</title>
   <link href="http://nevermoi.com/2016/08/12/event-model-notes.html"/>
   <updated>2016-08-12T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/08/12/event-model-notes</id>
   <content type="html">&lt;h1 id=&quot;what-is-an-event&quot;&gt;What is an Event?&lt;/h1&gt;

&lt;p&gt;An event is a notification that occurs in response to an action, such as clicking, key pressing, or state changes in document.&lt;/p&gt;

&lt;h2 id=&quot;the-life-cycle-of-an-event&quot;&gt;The Life Cycle of an Event&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The user action or condition associated with the event occurs.&lt;/li&gt;
  &lt;li&gt;The event object is instantly updated.&lt;/li&gt;
  &lt;li&gt;The event fires.&lt;/li&gt;
  &lt;li&gt;The event handler associated with the source element is called, carries out its actions, and returns.&lt;/li&gt;
  &lt;li&gt;The event bubbles up to the next element in the hierarchy, and the event handler for that element is called. This step repeats until the event bubbles up to the window object or a handler cancels bubbling.&lt;/li&gt;
  &lt;li&gt;The final default action, if any, is taken, but only if this action has not been canceled by a handler.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example to explain event bubbling.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;body onclick=&quot;wasClicked()&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Welcome!&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;This is a very short document.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script&amp;gt;
    function wasClicked() {
        alert(&quot;I was clicked &quot; + window.event.srcElement.tagName);
    }
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;event-bubbling&quot;&gt;Event Bubbling&lt;/h2&gt;

&lt;p&gt;Event bubbling ensures that the event handlers for all elements in which an event occurs have an opportunity to respond to the event. Bubbling events will then trigger any additional event listeners found by following the Node’s parent chain upward, checking for any event listeners registered on each successive Node. This upward propagation will continue up to and including the Document.&lt;/p&gt;

&lt;p&gt;Event handler may choose to prevent continuation of the bubbling process by calling the &lt;em&gt;preventBubble&lt;/em&gt; method of the Event interface.&lt;/p&gt;

&lt;h2 id=&quot;canceling-default-actions&quot;&gt;Canceling Default Actions&lt;/h2&gt;

&lt;p&gt;Cancelation is accomplished by calling the Event’s &lt;em&gt;preventDefault&lt;/em&gt; method. If one or more EventListeners call &lt;em&gt;preventDefault&lt;/em&gt; during any phase of event flow the default action will be canceled.&lt;/p&gt;

&lt;p&gt;Canceling a default action is not the same as canceling event bubbling. You can cancel the default action and still allow the event to bubble up through the hierarchy.&lt;/p&gt;

&lt;h2 id=&quot;event-object&quot;&gt;Event object&lt;/h2&gt;

&lt;p&gt;The web browser defines many events of different kinds. Each definition includes, as the data structure passed to the handler function, an object which inherits from the &lt;em&gt;EventPrototype&lt;/em&gt; object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;references: &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;w3 event specs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Some tips about Strict Mode of JavaScript</title>
   <link href="http://nevermoi.com/2016/08/11/strict-mode-notes.html"/>
   <updated>2016-08-11T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/08/11/strict-mode-notes</id>
   <content type="html">&lt;h1 id=&quot;what-does-strict-mode-bring-to-us&quot;&gt;What does Strict Mode bring to us&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;strict mode eliminates some JavaScript silent errors by changing them to throw errors.&lt;/li&gt;
  &lt;li&gt;strict mode fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that’s not strict mode&lt;/li&gt;
  &lt;li&gt;strict mode prohibits some syntax likely to be defined in future versions of ECMAScript.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;invoking-strict-mode&quot;&gt;Invoking Strict Mode&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Strict mode applies to entire &lt;strong&gt;scripts&lt;/strong&gt; or to individual &lt;strong&gt;functions&lt;/strong&gt;. It doesn’t apply to block statements enclosed in {} braces;&lt;/li&gt;
  &lt;li&gt;It is recommended that you enable strict mode on a function-by-function basis, because concatenating strict and non-strict scripts is problematic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;changes-in-strict-mode&quot;&gt;Changes in strict mode&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Converting mistakes into errors&lt;/li&gt;
  &lt;li&gt;Simplifying variable uses&lt;/li&gt;
  &lt;li&gt;Making eval and arguments simpler&lt;/li&gt;
  &lt;li&gt;“Securing” JavaScript&lt;/li&gt;
  &lt;li&gt;Paving the way for future ECMAScript versions&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker and Vagrant Breifing</title>
   <link href="http://nevermoi.com/2016/07/22/docker-vagrant-breifing.html"/>
   <updated>2016-07-22T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/07/22/docker-vagrant-breifing</id>
   <content type="html">&lt;h1 id=&quot;what-is-docker&quot;&gt;What is docker?&lt;/h1&gt;

&lt;p&gt;Docker, previously called dotCloud and open-sourced in 2013, is a Linux-only virtual environment (VE) tool, not a VM tool. It builds on LxC (LinuX Containers), which uses the cgroups functionality to enable creation and running of multiple isolated Linux virtual environments (VE) on a single control host.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h2&gt;
&lt;p&gt;Docker is really an extension of LxC, which is itself a sort of supercharged Linux chroot. LxC can only isolate not just your installed applications, but even the entire OS. What Docker does is give you the ability to snapshot the OS and apps you want into a common image, then easily deploy this image on other Docker hosts;&lt;/p&gt;

&lt;h1 id=&quot;what-is-vagrant&quot;&gt;What is vagrant?&lt;/h1&gt;
&lt;p&gt;Vagrant, an open-source product released in 2010, is best described as a &lt;strong&gt;VM manager&lt;/strong&gt;. It allows you to script and package the VM config and the provisioning setup. It is designed to run on top of almost any VM tool – VirtualBox, VMWare, AWS, etc.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works-1&quot;&gt;How it works?&lt;/h2&gt;
&lt;p&gt;Vagrant, on the other hand, still creates VM’s, although these are still lighter than the full-fat VM’s created by VM emulators. Vagrant provides a reproducible way to generate fully virtualized machines using Oracle’s VirtualBox, AWS or VMWare technology as providers. There is a plugin called vagrant-libvirt, which adds support for libvirt to Vagrant.&lt;/p&gt;

&lt;h1 id=&quot;ve-differs-to-vm&quot;&gt;VE differs to VM&lt;/h1&gt;
&lt;p&gt;So unlike a VM, a VE like Docker doesn’t create its own virtual computer with a distinct OS and processors and hardware emulation. A VE is VM-lite; it rides on the already existing kernel’s image of the underlying hardware, and only creates a ‘container’ in which to run your apps, and even recreate the OS if you want since the OS is also just another app running on the kernel. It places only a little extra load on the system, so unlike the traditional VM there is very little overhead when using Docker. 
EOB
//&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some tips about client-server communication</title>
   <link href="http://nevermoi.com/2016/07/11/client-server-communication.html"/>
   <updated>2016-07-11T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/07/11/client-server-communication</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Traditional Ajax request
This way is to set an &lt;em&gt;internal&lt;/em&gt; to make XMLHttpRequest, and it is easy to implement but not efficient for server, too heavy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comet (another Ajax way)
When XMLHttpRequest is sent, the server won’t respond until server has required data or the timeout is reached, the client received the response and open another request and loop this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Websocket (The future)
Easy as socket&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Server Sent Event (alternative)
Server sends the response after a connection setup&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;others related reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TCP: low-level, bi-directional, full-duplex, and guaranteed order transport layer. No browser support (except via plugin/Flash).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 1.0: request-response transport protocol layered on TCP. The client makes one full request, the server gives one full response, and then the connection is closed. The request methods (GET, POST, HEAD) have specific transactional meaning for resources on the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 1.1: maintains the request-response nature of HTTP 1.0, but allows the connection to stay open for multiple full requests/full responses (one response per request). Still has full headers in the request and response but the connection is re-used and not closed. HTTP 1.1 also added some additional request methods (OPTIONS, PUT, DELETE, TRACE, CONNECT) which also have specific transactional meanings. However, as noted in the introduction to the HTTP 2.0 draft proposal, HTTP 1.1 pipelining is not widely deployed so this greatly limits the utility of HTTP 1.1 to solve latency between browsers and servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Long-poll: sort of a “hack” to HTTP (either 1.0 or 1.1) where the server does not response immediately (or only responds partially with headers) to the client request. After a server response, the client immediately sends a new request (using the same connection if over HTTP 1.1).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP streaming: a variety of techniques (multipart/chunked response) that allow the server to send more than one response to a single client request. The W3C is standardizing this as Server-Sent Events using a text/event-stream MIME type. The browser API (which is fairly similar to the WebSocket API) is called the EventSource API.
Comet/server push: this is an umbrella term that includes both long-poll and HTTP streaming. Comet libraries usually support multiple techniques to try and maximize cross-browser and cross-server support.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebSockets: a transport layer built-on TCP that uses an HTTP friendly Upgrade handshake. Unlike TCP, which is a streaming transport, WebSockets is a message based transport: messages are delimited on the wire and are re-assembled in-full before delivery to the application. WebSocket connections are bi-directional, full-duplex and long-lived. After the initial handshake request/response, there is no transactional semantics and there is very little per message overhead. The client and server may send messages at any time and must handle message receipt asynchronously.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SPDY: a Google initiated proposal to extend HTTP using a more efficient wire protocol but maintaining all HTTP semantics (request/response, cookies, encoding). SPDY introduces a new framing format (with length-prefixed frames) and specifies a way to layering HTTP request/response pairs onto the new framing layer. Headers can be compressed and new headers can be sent after the connection has been established. There are real world implementations of SPDY in browsers and servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 2.0: has similar goals to SPDY: reduce HTTP latency and overhead while preserving HTTP semantics. The current draft is derived from SPDY and defines an upgrade handshake and data framing that is very similar the the WebSocket standard for handshake and framing. An alternate HTTP 2.0 draft proposal (httpbis-speed-mobility) actually uses WebSockets for the transport layer and adds the SPDY multiplexing and HTTP mapping as an WebSocket extension (WebSocket extensions are negotiated during the handshake).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebRTC/CU-WebRTC: proposals to allow peer-to-peer connectivity between browsers. This may enable lower average and maximum latency communication because as the underlying transport is SDP/datagram rather than TCP. This allows out-of-order delivery of packets/messages which avoids the TCP issue of latency spikes caused by dropped packets which delay delivery of all subsequent packets (to guarantee in-order delivery).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;QUIC: is an experimental protocol aimed at reducing web latency over that of TCP. On the surface, QUIC is very similar to TCP+TLS+SPDY implemented on UDP. QUIC provides multiplexing and flow control equivalent to HTTP/2, security equivalent to TLS, and connection semantics, reliability, and congestion control equivalentto TCP. Because TCP is implemented in operating system kernels, and middlebox firmware, making significant changes to TCP is next to impossible. However, since QUIC is built on top of UDP, it suffers from no such limitations. QUIC is designed and optimised for HTTP/2 semantics.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Let's build a simple grid system like Bootstrap</title>
   <link href="http://nevermoi.com/2016/06/01/build-grid-system-css.html"/>
   <updated>2016-06-01T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/06/01/build-grid-system-css</id>
   <content type="html">&lt;h3 id=&quot;what-is-a-grid-system&quot;&gt;1. What is a Grid System?&lt;/h3&gt;
&lt;p&gt;A grid system, in the scope of css, is a structure to build stacked content vertically and horizontally.&lt;/p&gt;

&lt;h3 id=&quot;two-basic-components&quot;&gt;2. Two basic components&lt;/h3&gt;
&lt;p&gt;Grid system, at lease, has two basic components: row and column, but some grid systems have a wrapper above basic components, &lt;strong&gt;container&lt;/strong&gt; from Bootstrap, for example.&lt;/p&gt;

&lt;p&gt;Additionally, the two components don’t include the padding and border within the declared width and height. To make it ready for responsiveness, we can set &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing&quot;&gt;box-sizing&lt;/a&gt; property to &lt;code&gt;border-box&lt;/code&gt; for both rows and columns:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.row, .column {
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can leverage percentages for the widths of the columns. This allows the columns to scale upwards and downwards within different viewports while maintaining the structure.&lt;/p&gt;

&lt;h3 id=&quot;make-row-clearfixed&quot;&gt;3. Make row clearfixed&lt;/h3&gt;
&lt;p&gt;One line one row, so the row component must clear all the floating elements on both sides of it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.row:before, .row:after {
    content: &quot; &quot;;
    display: table;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.row:after {
    clear: both;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;make-column-floated-and-aesthetic&quot;&gt;4. Make column floated and aesthetic&lt;/h3&gt;
&lt;p&gt;Since column is accommodated inside of row, it is floated horizontal alignment, and the position should be relative to allow any absolutely position content within the column to be positioned relative to that column&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column {
    position: relative;
    float: left;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make columns aesthetic, a simple gutter is needed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column + .column {
    margin-left: 1.6%;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;calculating-column-width&quot;&gt;5. Calculating column width&lt;/h3&gt;
&lt;p&gt;Now we need to determine the maximum amount of columns per row, before calculating the width of column. Let take Bootstrap’s choice: 12 columns per row.&lt;/p&gt;

&lt;p&gt;The calculation will be based on formula:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;scw = single column width &lt;br /&gt;
m = margin (1.6%) &lt;br /&gt;
mc = maximum columns (12) &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the single column’s width is 6.86666666667%&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column-1 {
    width: 6.86666666667%;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column-2 {
    width: 15.3333333333%;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column-3 {
    width: 23.8%;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column-4 {
    width: 32.2666666667%;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
.column-5 {
    width: 40.7333333333%;
}
/* omitted */
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;optimizing-for-mobile-devices&quot;&gt;6. Optimizing for mobile devices&lt;/h3&gt;
&lt;p&gt;To adapt to various devices with smaller viewports, we need &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;Media Queries&lt;/a&gt; to set the rule:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
@media only screen and (max-width: 550px) {
  .column-1,
  .column-12 {
    width: auto,
    float: none
  }
  .column + .column {
    margin-left: 0;
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;finally-put-everything-together&quot;&gt;7. Finally, put everything together.&lt;/h3&gt;

&lt;p&gt;Here is a demo:&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;QEwMyP&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;nevermoi&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/nevermoi/pen/QEwMyP/&quot;&gt;Understanding CSS Grid Systems&lt;/a&gt; by nevermoi (&lt;a href=&quot;http://codepen.io/nevermoi&quot;&gt;@nevermoi&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Why Junit Cases not run in order in JDK 7.</title>
   <link href="http://nevermoi.com/2016/02/23/why-junit-cases-not-run-in-order.html"/>
   <updated>2016-02-23T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/02/23/why-junit-cases-not-run-in-order</id>
   <content type="html">&lt;h3 id=&quot;conclusion-first&quot;&gt;Conclusion first:&lt;/h3&gt;
&lt;p&gt;Junit uses reflection for getting and executing test methods. Junit get list of all tests using “Method[] getDeclaredMethods()” from java.lang.Class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The elements in the array returned by getDeclaredMethods are not sorted and are not in any particular order.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;how-to-make-executions-order-fixed&quot;&gt;How to make executions order fixed&lt;/h3&gt;
&lt;p&gt;Since JUnit 4.11, you can do:&lt;/p&gt;

&lt;p&gt;```
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public class MyTest {
 }&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Reference: 
&lt;a href=&quot;http://junit.org/javadoc/latest/index.html?org/junit/FixMethodOrder.html&quot;&gt;MethodSorters&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://junit.org/javadoc/latest/index.html?org/junit/FixMethodOrder.html&quot;&gt;Annotation Type FixMethodOrder&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Understand Longest Common Subsequence</title>
   <link href="http://nevermoi.com/2016/02/15/understand-LCS.html"/>
   <updated>2016-02-15T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/02/15/understand-LCS</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;source &lt;a href=&quot;https://en.wikipedia.org/wiki/Longest_common_subsequence_problem&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The table below shows the steps of generating LCS.&lt;/p&gt;

&lt;table style=&quot;text-align: center;&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Ø&lt;/th&gt;
&lt;th&gt;M&lt;/th&gt;
&lt;th&gt;Z&lt;/th&gt;
&lt;th&gt;J&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;U&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;Ø&lt;/th&gt;
&lt;td style=&quot;background:yellow&quot;&gt;&lt;b&gt;0&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;td style=&quot;background:yellow&quot;&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;M&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;J&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;U&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&quot;background:yellow&quot;&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;Z&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&quot;background: yellow&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Here are the steps intepreted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;given 2 strings: s1, s2, make them to char array:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
char[] seq1 = s1.toCharArray();
char[] seq2 = s2.toCharArray();
int i = seq1.length;
int j = seq2.length;
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create 2 dimensional array using seq1, seq2:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
char[][] matrix = new char[i][j]
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;from tail to head, we do:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
function lcs(matrix, seq1, seq2, i, j):
if i == 0 or j == 0: return &quot; &quot;;
else if seq1[i-1] == seq2[j-1]: return lcs(matrix, seq1, seq2, i, j) + seq1[i-1];
else:
    if matrix[i][j-1] &amp;gt; matrix[i-1][j]: return lcs(matrix, seq1, seq2, i, j-1)
    else lcs(matrix, seq1, seq2, i-1, j)
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>我们走一遍http中request/response header部分</title>
   <link href="http://nevermoi.com/2016/02/13/http-header-note.html"/>
   <updated>2016-02-13T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/02/13/http-header-note</id>
   <content type="html">&lt;h3 id=&quot;request-header--&quot;&gt;Request Header 解释 示例&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Accept 指定客户端能够接收的内容类型 Accept: text/plain, text/html&lt;/li&gt;
  &lt;li&gt;Accept-Charset 浏览器可以接受的字符编码集。 Accept-Charset: iso-8859-5&lt;/li&gt;
  &lt;li&gt;Accept-Encoding 指定浏览器可以支持的web服务器返回内容压缩编码类型。 Accept-Encoding: compress, gzip&lt;/li&gt;
  &lt;li&gt;Accept-Language 浏览器可接受的语言 Accept-Language: en,zh&lt;/li&gt;
  &lt;li&gt;Accept-Ranges 可以请求网页实体的一个或者多个子范围字段 Accept-Ranges: bytes&lt;/li&gt;
  &lt;li&gt;Authorization HTTP授权的授权证书 Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/li&gt;
  &lt;li&gt;Cache-Control 指定请求和响应遵循的缓存机制 Cache-Control: no-cache&lt;/li&gt;
  &lt;li&gt;Connection 表示是否需要持久连接。（HTTP 1.1默认进行持久连接） Connection: close&lt;/li&gt;
  &lt;li&gt;Cookie HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 Cookie: $Version=1; Skin=new;&lt;/li&gt;
  &lt;li&gt;Content-Length 请求的内容长度 Content-Length: 348&lt;/li&gt;
  &lt;li&gt;Content-Type 请求的与实体对应的MIME信息 Content-Type: application/x-www-form-urlencoded&lt;/li&gt;
  &lt;li&gt;Date 请求发送的日期和时间 Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
  &lt;li&gt;Expect 请求的特定的服务器行为 Expect: 100-continue&lt;/li&gt;
  &lt;li&gt;From 发出请求的用户的Email From: user@email.com&lt;/li&gt;
  &lt;li&gt;Host 指定请求的服务器的域名和端口号 Host: www.zcmhi.com&lt;/li&gt;
  &lt;li&gt;If-Match 只有请求内容与实体相匹配才有效 If-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/li&gt;
  &lt;li&gt;If-Modified-Since 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码 If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/li&gt;
  &lt;li&gt;If-None-Match 如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变 If-None-Match: “737060cd8c284d8af7ad3082f209582d”&lt;/li&gt;
  &lt;li&gt;If-Range 如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag If-Range: “737060cd8c284d8af7ad3082f209582d”&lt;/li&gt;
  &lt;li&gt;If-Unmodified-Since 只在实体在指定时间之后未被修改才请求成功 If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/li&gt;
  &lt;li&gt;Max-Forwards 限制信息通过代理和网关传送的时间 Max-Forwards: 10&lt;/li&gt;
  &lt;li&gt;Pragma 用来包含实现特定的指令 Pragma: no-cache&lt;/li&gt;
  &lt;li&gt;Proxy-Authorization 连接到代理的授权证书 Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/li&gt;
  &lt;li&gt;Range 只请求实体的一部分，指定范围 Range: bytes=500-999&lt;/li&gt;
  &lt;li&gt;Referer 先前网页的地址，当前请求网页紧随其后,即来路 Referer: http://www.zcmhi.com/archives/71.html&lt;/li&gt;
  &lt;li&gt;TE 客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息 TE: trailers,deflate;q=0.5&lt;/li&gt;
  &lt;li&gt;Upgrade 向服务器指定某种传输协议以便服务器进行转换（如果支持） Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11&lt;/li&gt;
  &lt;li&gt;User-Agent User-Agent的内容包含发出请求的用户信息 User-Agent: Mozilla/5.0 (Linux; X11)&lt;/li&gt;
  &lt;li&gt;Via 通知中间网关或代理服务器地址，通信协议 Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)&lt;/li&gt;
  &lt;li&gt;Warning 关于消息实体的警告信息 Warn: 199 Miscellaneous warning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;response-header--&quot;&gt;Response Header 解释 示例&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Accept-Ranges 表明服务器是否支持指定范围请求及哪种类型的分段请求 Accept-Ranges: bytes&lt;/li&gt;
  &lt;li&gt;Age 从原始服务器到代理缓存形成的估算时间（以秒计，非负） Age: 12&lt;/li&gt;
  &lt;li&gt;Allow 对某网络资源的有效的请求行为，不允许则返回405 Allow: GET, HEAD&lt;/li&gt;
  &lt;li&gt;Cache-Control 告诉所有的缓存机制是否可以缓存及哪种类型 Cache-Control: no-cache&lt;/li&gt;
  &lt;li&gt;Content-Encoding web服务器支持的返回内容压缩编码类型。 Content-Encoding: gzip&lt;/li&gt;
  &lt;li&gt;Content-Language 响应体的语言 Content-Language: en,zh&lt;/li&gt;
  &lt;li&gt;Content-Length 响应体的长度 Content-Length: 348&lt;/li&gt;
  &lt;li&gt;Content-Location 请求资源可替代的备用的另一地址 Content-Location: /index.htm&lt;/li&gt;
  &lt;li&gt;Content-MD5 返回资源的MD5校验值 Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==&lt;/li&gt;
  &lt;li&gt;Content-Range 在整个返回体中本部分的字节位置 Content-Range: bytes 21010-47021/47022&lt;/li&gt;
  &lt;li&gt;Content-Type 返回内容的MIME类型 Content-Type: text/html; charset=utf-8&lt;/li&gt;
  &lt;li&gt;Date 原始服务器消息发出的时间 Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
  &lt;li&gt;ETag 请求变量的实体标签的当前值 ETag: “737060cd8c284d8af7ad3082f209582d”&lt;/li&gt;
  &lt;li&gt;Expires 响应过期的日期和时间 Expires: Thu, 01 Dec 2010 16:00:00 GMT&lt;/li&gt;
  &lt;li&gt;Last-Modified 请求资源的最后修改时间 Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT&lt;/li&gt;
  &lt;li&gt;Location 用来重定向接收方到非请求URL的位置来完成请求或标识新的资源 Location: http://www.zcmhi.com/archives/94.html&lt;/li&gt;
  &lt;li&gt;Pragma 包括实现特定的指令，它可应用到响应链上的任何接收方 Pragma: no-cache&lt;/li&gt;
  &lt;li&gt;Proxy-Authenticate 它指出认证方案和可应用到代理的该URL上的参数 Proxy-Authenticate: Basic&lt;/li&gt;
  &lt;li&gt;refresh 应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）&lt;/li&gt;
  &lt;li&gt;Refresh: 5; url=http://www.zcmhi.com/archives/94.html&lt;/li&gt;
  &lt;li&gt;Retry-After 如果实体暂时不可取，通知客户端在指定时间之后再次尝试 Retry-After: 120&lt;/li&gt;
  &lt;li&gt;Server web服务器软件名称 Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)&lt;/li&gt;
  &lt;li&gt;Set-Cookie 设置Http Cookie Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1&lt;/li&gt;
  &lt;li&gt;Trailer 指出头域在分块传输编码的尾部存在 Trailer: Max-Forwards&lt;/li&gt;
  &lt;li&gt;Transfer-Encoding 文件传输编码 Transfer-Encoding:chunked&lt;/li&gt;
  &lt;li&gt;Vary 告诉下游代理是使用缓存响应还是从原始服务器请求 Vary: *&lt;/li&gt;
  &lt;li&gt;Via 告知代理客户端响应是通过哪里发送的 Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)&lt;/li&gt;
  &lt;li&gt;Warning 警告实体可能存在的问题 Warning: 199 Miscellaneous warning&lt;/li&gt;
  &lt;li&gt;WWW-Authenticate 表明客户端请求实体应该使用的授权方案 WWW-Authenticate: Basic&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>二进制表示float-point</title>
   <link href="http://nevermoi.com/2016/02/12/float-point-note.html"/>
   <updated>2016-02-12T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2016/02/12/float-point-note</id>
   <content type="html">&lt;p&gt;在讨论float-point之前，我们先看int型在计算机内部是怎么表示的：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int i = 5;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上面的statement声明了一个int型变量 i，并赋值为 5，其二进制为101。在32位计算机中，4个字节表示int变量，所以，5被以32位二进制的方式保存在了计算机里 ”00000000 00000000 00000000 00000101“，其16进制表示为 0x00000005。&lt;/p&gt;

&lt;p&gt;那么当这个int型的i被转换为float型的时候，怎么表示？&lt;/p&gt;

&lt;p&gt;根据 ”IEEE 754“ 国际标准，任意一个二进制浮点数V可以表示为：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;V = (-1)^S x M x 2^E&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;S M E这三个将被存入计算机内部。 其中S是符号位，当S=0时，表示正数，S=1时，表示负数。M是有效数字，2&amp;gt;M&amp;gt;=1。E是指数位。&lt;/p&gt;

&lt;p&gt;上面的例子中 i 的十进制是 5， 二进制为 101， 表示成IEEE 754形式为：(-1)^0 x 1.01 x 2^2。 则：S = 0, M = 1.01, E = 2。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 在32位计算机中，最高位是S=0，接下来的8位为指数E=2 (0000 0010)，剩下的23位是M=1.01
2. 在64位计算机中，最高位是S=0，接下来的11位为指数E=2 (0000 0000 010)，剩下的52位是M=1.01
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;S没啥好说的， 要么1，要么0.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;先说M，因为比E简单。我们知道M的值介于1和2之间，IEEE 754就觉得 M=1.xxxxx中的1也可以省略掉，于是就只保存xxxxx部分，读出来的时候再加上1。于是，在32位计算机中，M的有效位变成了24位；64位系统中变成了53位。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;说到E，在32位和64位计算机中，它的位数不同所以真实值也不同，但又因为其有正负之分，为了平均表示正负，IEEE 754 规定要减去一个中位数。8位E的情况下，E可以表示0～255，其中位数为 127；11位E的情况下，E可以表示0～2047，其中位数为1023。这个中位数就是正负的分界线。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如：101 = (-1)^0 x 1.01 x 2^2，E=2，在保存成64位的时候会变成2+1023=1025 (1000 0000 001 );&lt;/p&gt;

&lt;p&gt;接下来我解释一下为啥javascript中 &lt;code&gt;0.5-0.25=0.25&lt;/code&gt; 而 &lt;code&gt;0.4-0.1=0.30000000000...04&lt;/code&gt; 这样怪东西。&lt;/p&gt;

&lt;p&gt;首先呢，有两个概念，一个是定点小数，一个是浮点小数。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;定点小数有个问题是，一些小数不可能用二进制准确表达出来，比如说0.2。总有舍弃一些末位。在javascript中，能在console显示或者其他print出来的都是定点小数。&lt;/li&gt;
  &lt;li&gt;浮点小数就相对精确一些，因为它舍弃的位更低，所以表示的范围也更大一点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个非2的幂级数的倒数的数， 无论定点还是浮点小数，都不能在计算机中100%准确表示。&lt;/p&gt;

&lt;p&gt;所以减出来就不是精确的了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Principles of OOD and examples</title>
   <link href="http://nevermoi.com/2015/01/26/principles-of-ood.html"/>
   <updated>2015-01-26T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2015/01/26/principles-of-ood</id>
   <content type="html">&lt;h3 id=&quot;vspr&quot;&gt;VS;PR&lt;/h3&gt;
&lt;p&gt;It is important in a way to master some principles of OOD: &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_design&quot;&gt;Object Oriented Design&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Single Responsibility Principle: &lt;a href=&quot;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&quot;&gt;Google Doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Open Closed Principle: &lt;a href=&quot;https://drive.google.com/file/d/0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1/view&quot;&gt;Google Drive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Liskov Substitution Principle: &lt;a href=&quot;https://drive.google.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/view&quot;&gt;Google Doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Interface Segregation Principle: &lt;a href=&quot;https://drive.google.com/file/d/0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi/view&quot;&gt;Google Doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Dependency Inversion Principle: &lt;a href=&quot;https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view&quot;&gt;Google Drive&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The artical brings these to me: 
&amp;gt; http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How this blog starts up</title>
   <link href="http://nevermoi.com/2015/01/24/hello-world.html"/>
   <updated>2015-01-24T00:00:00+08:00</updated>
   <id>http://nevermoi.com/2015/01/24/hello-world</id>
   <content type="html">&lt;h4 id=&quot;content&quot;&gt;content&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Install &lt;em&gt;ruby&lt;/em&gt; to Windows OS: &lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;Ruby for Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;em&gt;gem&lt;/em&gt;, which is a ruby package manager: &lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;Gem&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Update build tools using its DevKit: &lt;a href=&quot;http://flatshaded.com/2013/05/installing-jekyll-on-windows/&quot;&gt;fast-stemmer error fixing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install &lt;em&gt;jekyll&lt;/em&gt;: &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Config &lt;em&gt;Github&lt;/em&gt; page: &lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;Github Page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Good luck!&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
